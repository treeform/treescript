(def VERSION .003)

(def fs (require "fs"))

; utils
(def (json a) (JSON.stringify a))
(def (is_string obj)
  (js "!!(obj === '' || (obj && obj.charCodeAt && obj.substr))"))
(def is_list Array.isArray)
(def (is_object obj)
  (if (is_list obj) 
    false
    (js "(obj === Object(obj))")))
(def (is_number obj)
  (js "!!(obj === 0 || (obj && obj.toExponential && obj.toFixed))"))
(def (rest l) (l.slice 1))
(def (join) (js "
  var ll=arguments.length, l=[]; 
  for(var i=0; i < ll; i++) {
    var a = arguments[i];
    for(e in a) l.push(a[e]);
  }; 
  ") 
  l)
(def (list) (js "
  var ll=arguments.length, l=[]; 
  for(var i=0; i < ll; i++) {
    l.push(arguments[i]);
  }; 
  ") 
  l)
(def (table) (js "
  var ll=arguments.length, t={}; 
  for(var i=0; i < ll; i+=2) {
    t[arguments[i]] = arguments[i+1]
  }; 
  ") 
  t)
(def (str_join l str)
  (l.join str))
(def (get l i) (js "l[i]"))
(def (set l i e) (js "l[i]=e") e)
(def (err msg)
  (js "throw msg")
  false)
  
(def (include file_) 
    (js "with (global) { eval(fs.readFileSync(file_) + '');};")
    0)

(def OPS (table
  ; basic math
  "+" "+"  "-" "-"  "*" "*"  "/" "/"  "%" "%"
  ; comperison
  ">" ">"  ">=" ">="  "<" "<"  "<=" "<="  "=" "==="  "!=" "!=="
  ; function like
  "inc" "++"  "dec" "--"
  ; booleans
  "and" "&&"  "or" "||"  "not" "!"))

(def QUOTES_RE (new (RegExp "^['@~#]+$")))


; trys to compile it to a number if it can
(def (try_number token)
  (def number (parseFloat token))
  (if 
    (isNaN number) token ; its not a number - a string
    (= number 0) (parseInt token) ; hande the 0xFF case
    number))

; --------------------------------------------------  
; takes a string and spits out tokens
; also takes care of comments and strings
(def (tokenize code filename)
  (def line 1)
  (def column 1)
  (def tokens (list))
  (def word (list))
  (def i 0)
  (def len code.length)
  (def (add_word)
    (if 
      (> word.length 0)
      (do 
        (def token (word.join ""))
        (: token.line line)
        (: token.filename filename)
        (: token.column column)
        (tokens.push token)
        (: word (list)))))
  (while (< i len)
    (: c (get code i))
    ; main case block
    (if
      (or (= c "\n"))
        (do (add_word)
          (: line (+ line 1))
          (: column 0))
      ; its a space
      (or (= c " ") (= c "\t"))
        (add_word)
      ; its a char that should appear by itself
      (or (= c "(") (= c ")") (QUOTES_RE.exec c))
        (do 
          (add_word) 
          (tokens.push c))
      ; its a string
      (= c "\"")
        (do 
          (add_word)
          (def next true)
          (word.push c)
          (while next
            (if (>= i len)
              (err (+ "unclosed \" " filename ":" line "," column)))
            (: i (+ i 1))
            (: column (+ column 1))
            (: c (get code i))
            (if (= c "\"") (: next false))
            (if (= c "\\") 
              (do 
                (word.push c)
                (: i (+ i 1))
                (: c (get code i))))
            (word.push c))
          (add_word))
      (= c ";")
        (do 
          (add_word)
          (def next true)
          (while (and next (< i len))
            (: i (+ i 1))
            (: c (get code i))
            (if (= c "\n") (: next false)))
          ;WART: cant return a while loop
          false)
          
      ; if its nont of the above just add it to the token
      (word.push c))
    (: i (+ i 1))
    (: column (+ column 1)))
  ; there might be an unadded word
  (add_word)
  ; return tokens
  tokens)

; --------------------------------------------------
; makes ( ) and ' behave right
(def (parse tokens)
  (def stack (list))
  (def line (list))
  ; ' quoting
  (def (squote q)
    (: qline (list q))
    (def t (tokens.shift 0))
    (if
      (= t "(")
      (do 
        (stack.push line)
        (: line qline))
      (do 
        (qline.push (try_number t)) 
        (line.push qline))))
  ; ) open perens
  (def (spush)
    (stack.push line)
    (: line (list)))
  ; ) close perens
  (def (spop)   
    (if (< stack.length 1) 
      (err "unbalanced perens, to many )"))
    (do 
      (def up (stack.pop))
      (up.push line)
      (: line up)))
  ; dispatch function
  (def (next)
    (def t (tokens.shift 0))
    (if
      (QUOTES_RE.exec t) (squote t)
      (= t "(") (spush)
      (= t ")") (spop)
      (line.push (try_number t))))
  (while (> tokens.length 0)
     (next))
  (if (> stack.length 0)
    (err "unbalanced perens, not enough )"))
  line)

; --------------------------------------------------
; the compiler function
(def (compile tree)
  (def buffer (list))
  ; add a string to the end of the buffer
  (def (wr str)
    (buffer.push str))
  ; if string match the end of buffer remove it  
  (def (rm str)
    (if (= (get buffer (- buffer.length 1)) str)
      (buffer.pop)))
      
  ; quote compiler
  (def (quotate tree)
    (console.log (JSON.stringify tree))
    (if 
      (is_list tree)
      (do 
        (wr "[")
        (def i 0)
        (while (< i tree.length)
          (quotete e)
          (: i (+ i 1)))
        (wr "]"))
      (is_string tree)
      (do 
        (wr "\"")
        (wr tree)
        (wr "\""))))
      
  (def SCOPE_MARK "//$SCOPE$")  
  (def scope_stack (list))
  (def (scope_start) 
    (scope_stack.push (list))
    (wr SCOPE_MARK))
  (def (scope_end) 
    (def vars (scope_stack.pop))
    (def i (- buffer.length 1))
    (while (!= (get buffer i) SCOPE_MARK)
      (: i (- i 1)))
    (set buffer i 
      (if vars.length 
        (+ "var " (str_join vars ",") ";\n")
        "")))
      
  
  (def (scope_add name)
    (def top (get scope_stack (- scope_stack.length 1)))
    (top.push name))
      
  (def (co_def head tree)
    (def what (get tree 1))
    (wr "(")
    (if (is_list what)
        (do
          (def fn_name (get what 0))
          (scope_add fn_name)
          (wr fn_name)
          (wr "=")
          (def tree2 (join 
            (list "fn") 
            (list (rest (get tree 1))) 
            (tree.slice 2)))
          (co_fn head tree2))
        (do 
          (scope_add what)
          (wr what)
          (wr "=")
          (sub (get tree 2))))
    (wr ")"))
    
  (def (co_set head tree)
    (wr "(")
    (wr (get tree 1))
    (wr "=")
    (sub (get tree 2))
    (wr ")"))
            
  (def (co_ops head tree)
    (def op (get OPS head))
    (def i 1)
    (wr "(")
    (while (< i tree.length)
      (sub (get tree i))
      (wr op)
      (: i (+ i 1)))
    (rm op)
    (wr ")"))
    
  (def (co_js head tree)
    (def codestr (get tree 1))
    (wr (codestr.slice 1 -1)))
    
  (def (co_if head tree)
    (def i 1)
    (while (< (+ i 1) tree.length)
      (sub (get tree i))
      (wr "?")
      (: i (+ i 1))
      (sub (get tree i))
      (wr ":")
      (: i (+ i 1)))
    (if (< i tree.length)
      (sub (get tree i))
      (wr "null")))
  
  (def (co_fn head tree)
    (wr "(function(")
    (def args (get tree 1))
    (wr args)
    (wr "){\n")
    (scope_start)
    (def i 2)
    (while (< i tree.length)
      (if (= i (- tree.length 1))
        (wr "return "))
      (sub (get tree i))
      (wr ";\n")
      (: i (+ i 1)))
    (scope_end)
    (wr "})"))

  (def (co_do head tree)
    (wr "(function(){\n")
    (def i 1)
    (while (< i tree.length)
      (if (= i (- tree.length 1))
        (wr "return "))
      (sub (get tree i))
      (wr ";\n")
      (: i (+ i 1)))
    (wr "}())"))
    
  (def (co_while head tree)
    (wr "(function(){")
    (wr "while(")
    (sub (get tree 1))
    (wr "){\n")
    (def i 2)
    (while (< i tree.length)
      (sub (get tree i))
      (wr ";\n")
      (: i (+ i 1)))
    (wr "}}())"))
        
  (def (co_new head tree)      
    (wr "(new ")
    (sub (get tree 1))
    (wr ")"))
        
  (def (co_quote head tree)
    (if
      (> tree.length 2)
      (wr (JSON.stringify (tree.slice 1)))
      (wr (JSON.stringify (get tree 1)))))
      
  (def (co_regular_fn_call head tree)
    (wr head)
    (wr "(")
    (def i 1)
    (while (< i tree.length)
      (sub (get tree i))
      (wr ",")
      (: i (+ i 1)))
    (rm ",")
    (wr ")"))
    
  ; sub expression compiler      
  (def (sub tree)
    ;(console.log "sub" tree)
    (if 
      (is_list tree)
      (do 
        (def head (get tree 0))
        (if 
          (get OPS head) 
          (co_ops head tree)
          (= head "def")
          (co_def head tree)
          (= head "js")  
          (co_js head tree)
          (= head "if")  
          (co_if head tree)
          (= head "fn")  
          (co_fn head tree)
          (= head "do")  
          (co_do head tree)
          (= head "while")  
          (co_while head tree)
          (= head "new")  
          (co_new head tree)
          (= head ":")  
          (co_set head tree)
          (= head "'")
          (co_quote head tree)
          ; regular function call 
          (co_regular_fn_call head tree)))           
      (wr tree)))
      
  (scope_start)
  
  ; loop through all top level expressions
  (def i 0)
  (while (< i tree.length)
    (sub (get tree i))
    (wr ";\n")
    (: i (+ i 1)))
    
  (scope_end)    
  ; write out the final buffer
  (buffer.join ""))

(def (compile_file filename)
  (def source (fs.readFileSync filename "utf8"))
  (def code (compile (parse (tokenize source))))
  (fs.writeFileSync (+ filename ".js") code))

(def (run filename)
  (console.log "running" filename)
  (def source (fs.readFileSync filename "utf8"))
  (def code (compile (parse (tokenize source))))
  (eval code))
  
(def (repl)
  (def readline (require "readline"))
  (def rl (readline.createInterface process.stdin process.stdout))
  (def (next)  
    (rl.question ">" (fn (line)
      (console.log (eval (compile (parse (tokenize line)))))
      (next))))
  (next))

(def filename (get (process.argv.splice 2 1) 0))
(if 
  (= filename "-c")
  (compile_file (get process.argv 2))
  (filename)
  (run filename)
  (repl))
  
   
